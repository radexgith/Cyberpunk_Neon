// Define Theme Variables
$variant: 'dark'; // Set theme variant
$button_radius: 6px; // Default button radius
$menu_radius: 8px; // Menu border radius
$popover_radius: 8px; // Popover border radius

// Color Variables
$bg_color: #121212; // Dark background color
$fg_color: #e0e0e0; // Light foreground color for text
$selected_bg_color: #0b3d91; // Neon blue for selected items
$selected_fg_color: #ffffff; // White for selected text
$selected_borders_color: #2196f3; // Border color for selected items
$error_color: #ff1744; // Neon red for errors
$warning_color: #ffea00; // Bright yellow for warnings
$insensitive_bg_color: #2e2e2e; // Disabled background
$insensitive_fg_color: #757575; // Disabled text
$borders_color: #3f51b5; // Neon blue for borders
$alt_borders_color: #304ffe; // Alternate borders color
$drop_target_color: #ff9100; // Orange for drop targets
$osd_fg_color: #ffffff; // On-screen display text color
$osd_bg_color: #333333; // On-screen display background
$popover_bg_color: #1e1e1e; // Popover background color
$popover_hover_color: #283593; // Popover hover color (neon blue accent)
$link_color: #03a9f4; // Link color
$link_visited_color: #0288d1; // Visited link color
$osd_borders_color: #546e7a; // Borders for OSD
$osd_insensitive_fg_color: #b0bec5; // Insensitive text for OSD
$backdrop_fg_color: #9e9e9e; // Lighter text for backdrop
$backdrop_bg_color: #212121; // Slightly lighter backdrop background
$backdrop_base_color: #282828; // Base color for backdrop elements
$backdrop_insensitive_color: #616161; // Disabled color in backdrop
$backdrop_borders_color: #484848; // Borders in backdrop
$base_hover_color: #2a2a2a; // Base color for hover states
$top_hilight: #1e88e5; // Highlight color
$suggested_bg_color: #64dd17; // Suggested background color
$suggested_border_color: #00e676; // Suggested border color
$destructive_color: #d50000; // Red for destructive actions
$progress_bg_color: #64b5f6; // Background for progress bars
$menu_color: #1c1c1c; // Menu background color
$backdrop_menu_color: #262626; // Backdrop menu color
$backdrop_transition: 200ms ease-out; // Transition for backdrops
$window_radius: 12px; // Window border radius
$scrollbar_bg_color: #1f1f1f; // Background color for scrollbar
$scrollbar_slider_color: #4caf50; // Slider color
$scrollbar_slider_hover_color: #81c784; // Slider hover color
$scrollbar_slider_active_color: #388e3c; // Slider active color
$backdrop_scrollbar_bg_color: #282828; // Backdrop scrollbar background
$backdrop_scrollbar_slider_color: #66bb6a; // Backdrop scrollbar slider color
$dark_fill: #1a1a1a; // Dark fill for switches
$checkradio_bg_color: #4caf50; // Check/radio background color
$checkradio_fg_color: #ffffff; // Check/radio foreground color
$checkradio_borders_color: #388e3c; // Check/radio borders color
$focus_border_color: #1e90ff; // Focus border color (neon blue)
$ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94); // Ease-out transition
$backdrop_dark_fill: #1d1d1d; // Dark fill color for backdrop elements
$shadow_color: rgba(0, 0, 0, 0.5); // Shadow color for elements
// Define OSD Text Color
$osd_text_color: #ffffff; // White for bright contrast on dark backgrounds

// Define OSD Insensitive Background Color
$osd_insensitive_bg_color: #2c2c2c; // Dark gray for disabled/inactive OSD elements

// Define Insensitive Borders Color
$insensitive_borders_color: #4a4a4a; // A medium gray for borders on disabled elements


@function _widget_edge($c:$borders_edge) {
// outer highlight "used" on most widgets
  @if $c == none { @return none; }
  @else { @return 0 1px $c; }
}

@mixin _shadows($list...) {
//
// Helper mixin to stack up to box-shadows;
//
  $shadows: null;

  @each $shadow in $list {
    @if $shadow!=none { $shadows: $shadows, $shadow; }
  }

  box-shadow: $shadows;
}

// entries  // Yaru change: we detached focus from selection
@function entry_focus_border($fc:$focus_border_color) {
  @if $variant == 'light' { @return $fc; }
  @else { @return $focus_border_color }
}

@function entry_focus_shadow($fc:$focus_border_color) { @return inset 0 0 0 1px $fc; }  // Yaru change: we detached focus from selection

@mixin entry($t, $fc:$focus_border_color, $edge: none) {  // Yaru change: we detached focus from selection
//
// Entries drawing function
//
// $t: entry type
// $fc: focus color
// $edge: set to none to not draw the bottom edge or specify a color to not
//        use the default one
//
// possible $t values:
// normal, focus, insensitive, backdrop, backdrop-insensitive, osd, osd-focus, osd-backdrop;
//

  $_blank_edge: if($edge == none, none, 0 1px transparentize($edge, 1));
  $_entry_edge: if($edge == none, none, _widget_edge($edge));

  @if $t==normal {
    color: $text_color;
    border-color: $borders_color;
    background-color: $base_color;
    @include _shadows(entry_focus_shadow(transparentize($fc, 1)), $_entry_edge);
    // for the transition to work the number of shadows in different states needs to match, hence the transparent shadow here.
  }
  @if $t==focus {
    @include _shadows(entry_focus_shadow($fc), $_entry_edge);
    border-color: entry_focus_border($fc);
  }
  @if $t==insensitive {
    color: $insensitive_fg_color;
    border-color: $borders_color;
    background-color: $insensitive_bg_color;
    box-shadow: $_entry_edge;
  }
  @if $t==backdrop {
    color: $backdrop_text_color;
    border-color: $backdrop_borders_color;
    background-color: $backdrop_base_color;
    box-shadow: $_blank_edge;
  }
  @if $t==backdrop-insensitive {
    color: $backdrop_insensitive_color;
    border-color: $backdrop_borders_color;
    background-color: $insensitive_bg_color;
    box-shadow: $_blank_edge;
  }
  @if $t==osd {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
  }
  @if $t==osd-focus {
    color: $osd_text_color;
    border-color: $selected_bg_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: entry_focus_shadow($fc);
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
  }
  @if $t==osd-insensitive {
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-color: $osd_insensitive_bg_color;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
  @if $t==osd-backdrop {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

// buttons

@function _border_color($c, $darker: false) {
  @if $darker == true { @return darken($c, 20%); }
  @else { @return darken($c, 10%); }
}

@function _text_shadow_color ($tc: $fg_color, $bg: $bg_color) {
//
// calculate the color of text shadows
//
// $tc is the text color
// $bg is the background color
//
  $_lbg: lightness($bg)/100%;
  @if lightness($tc)<50% { @return transparentize(white, 1-$_lbg/($_lbg*1.3)); }
  @else { @return transparentize(black, $_lbg*0.8); }
}

@function _button_hilight_color($c) {
//
// calculate the right top hilight color for buttons
//
// $c: base color;
//
  @if lightness($c)>95% { @return white; }
  @else if lightness($c)>90% { @return transparentize(white, 0.2); }
  @else if lightness($c)>80% { @return transparentize(white, 0.5); }
  @else if lightness($c)>50% { @return transparentize(white, 0.8); }
  @else if lightness($c)>40% { @return transparentize(white, 0.9); }
  @else { @return transparentize(white, 0.98); }
}

@mixin _button_text_shadow ($tc:$fg_color, $bg:$bg_color) {
//
// helper function for the text emboss effect
//
// $tc is the optional text color, not the shadow color
//
// TODO: this functions needs a way to deal with special cases
//

  $_shadow: _text_shadow_color($tc, $bg);

  @if lightness($tc)<50% {
    text-shadow: 0 1px $_shadow;
    -gtk-icon-shadow: 0 1px $_shadow;
  }
  @else {
    text-shadow: 0 -1px $_shadow;
    -gtk-icon-shadow: 0 -1px $_shadow;
  }
}

@mixin button($t, $c:$bg_color, $tc:$fg_color, $edge: none) {
//
// Button drawing function
//
// $t:    button type,
// $c:    base button color for colored* types
// $tc:   optional text color for colored* types
// $edge: set to none to not draw the bottom edge or specify a color to not
//        use the default one
//
// possible $t values:
// normal, hover, active, insensitive, insensitive-active,
// backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
// osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
//
// This mixin sets the $button_fill global variable which containts the button background-image
//
  $_hilight_color: _button_hilight_color($c);
  $_button_edge: if($edge == none, none, _widget_edge($edge));
  $_blank_edge: if($edge == none, none, _widget_edge(transparentize($edge,1)));
  $_button_shadow: 0 1px 2px transparentize($shadow_color, 0.03);

  @if $t==normal {
  //
  // normal button
  //
    color: $tc;
    outline-color: $focus_border_color; // Yaru change: we detached focus from selection
    border-color: if($c != $bg_color, _border_color($c), $borders_color);
    // border-bottom-color: if($c != $bg_color, _border_color($c, true), $alt_borders_color);
    // Yaru change: we don't want to use gradients on buttons
    $button_fill: if($c == $bg_color, if($variant == 'light', image(lighten($c, 2%)), image(lighten($c, 4%))), image(lighten($c, 2%))) !global;
    background-image: $button_fill;
    @include _button_text_shadow($tc, $c);
    @include _shadows(none); // Yaru change: drop shadow
  }

  @else if $t==hover {
  //
  // hovered button
  //
    color: $tc;
    outline-color: $focus_border_color; // Yaru change: we detached focus from selection
    border-color: if($c != $bg_color, _border_color($c), $borders_color);
    border-bottom-color: if($c != $bg_color, _border_color($c, true), $alt_borders_color);
    @if $variant == 'light' {
      $button_fill: linear-gradient(to top, $c, lighten($c, 1%) 1px) !global;
      @include _button_text_shadow($tc, lighten($c, 6%));
      @include _shadows(inset 0 1px _button_hilight_color(lighten($c, 6%)), $_button_edge, $_button_shadow);
    }
    @else {
      $button_fill: linear-gradient(to top, darken($c,1%), lighten($c, 1%) 1px) !global;
      @include _button_text_shadow($tc,lighten($c, 6%));
      @include _shadows(inset 0 1px _button_hilight_color(darken($c, 2%)), $_button_edge, $_button_shadow);
    }
    box-shadow: none; // Yaru change: remove shadow
    background-image: if($c == $bg_color, if($variant == 'light', image(darken($c, 2%)), image(lighten($c, 6%))), image(lighten($c, 4%))); // Yaru change: darker bg on hover on light theme
  }

  @if $t==normal-alt {
  //
  // normal button alternative look
  //
    color: $tc;
    outline-color: $focus_border_color; // Yaru change: we detached focus from selection
    border-color: if($c != $bg_color, _border_color($c, true), $alt_borders_color);
    @include _button_text_shadow($tc, $c);
    @if $variant == 'light' {
      background-image: linear-gradient(to bottom, lighten($c, 5%) 20%, $c 90%);
       @include _shadows(inset 0 1px _button_hilight_color(lighten($c, 6%)),
                        $_button_edge, $_button_shadow);
    }
    @else {
      background-image: linear-gradient(to bottom, darken($c, 3%) 20%, darken($c, 6%) 90%);
      @include _shadows(inset 0 1px $_hilight_color,
                        $_button_edge, $_button_shadow);
    }
    @include _shadows(none); // Yaru change: remove shadow
    background-image: image(darken(white, 1%)); // Yaru change: brighter alt
    background-clip: padding-box; // Yaru change: fix background overflow
  }

  @else if $t==hover-alt {
  //
  // hovered button alternative look
  //
    color: $tc;
    outline-color: $focus_border_color; // Yaru change: we detached focus from selection
    border-color: if($c != $bg_color, _border_color($c, true), $alt_borders_color);
    @if $variant == 'light' {
      $button_fill: linear-gradient(to bottom, lighten($c, 9%) 10%, lighten($c, 4%) 90%) !global;
      @include _shadows(inset 0 1px _button_hilight_color(lighten($c, 6%)),
                        $_button_edge, $_button_shadow);
    }
    @else {
      $button_fill: linear-gradient(to bottom, $c 20%, darken($c, 4%) 90%) !global;
      @include _shadows(inset 0 1px $_hilight_color,
                        $_button_edge, $_button_shadow);
    }
    background-image: image(white); // Yaru change: brighter alt hover
    box-shadow: none; // Yaru change: remove shadow
  }

  @else if $t==active {
  //
  // pushed button
  //
    color: $tc;
    outline-color: $focus_border_color; // Yaru change: we detached focus from selection
    border-color: if($c != $bg_color, _border_color($c), $borders_color);
    $button_fill: if($variant == 'light', image(darken($c, 14%)), image(darken($c, 9%))) !global;
    background-image: $button_fill;
    @include _shadows(inset 0 1px transparentize($_hilight_color, 1), $_button_edge);

    text-shadow: none;
    -gtk-icon-shadow: none;
  }

  @else if $t==insensitive {
  //
  // insensitive button
  //
    $_bg: if($c != $bg_color, mix($c, $base_color, 85%), $insensitive_bg_color);

    color: if($tc != $fg_color, mix($tc, $_bg, 50%), $insensitive_fg_color);
    border-color: if($c != $bg_color, _border_color($c), $insensitive_borders_color);
    $button_fill: image($_bg) !global;
    background-image: $button_fill;
    text-shadow: none;
    -gtk-icon-shadow: none;
    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    @include _shadows(inset 0 1px transparentize(white, 1), $_button_edge);
  }

  @else if $t==insensitive-active {
  //
  // insensitive pushed button
  //
    $_bg: if($variant == 'light', darken(mix($c, $base_color, 85%), 8%), darken(mix($c, $base_color, 85%), 6%));
    $_bc: if($c != $bg_color, _border_color($c), $insensitive_borders_color);

    color: if($c != $bg_color, mix($tc, $_bg, 60%), $insensitive_fg_color);
    border-color: $_bc;
    $button_fill: image($_bg) !global;
    background-image: $button_fill;
    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    @include _shadows(inset 0 1px transparentize(white, 1), $_button_edge);
  }

  @else if $t==backdrop {
  //
  // backdrop button
  //
    $_bg: if($c != $bg_color, $c, $backdrop_bg_color);
    $_bc: if($variant == 'light', $c, _border_color($c));

    color: if($tc != $fg_color, mix($tc, $_bg, 80%), $backdrop_fg_color);
    border-color: if($c != $bg_color, $_bc, $backdrop_borders_color);
    $button_fill: image($_bg) !global;
    background-image: $button_fill;
    text-shadow: none;
    -gtk-icon-shadow: none;
    @include _shadows(inset 0 1px transparentize(white, 1), $_blank_edge);
  }

  @else if $t==backdrop-active {
  //
  // backdrop pushed button
  //
    $_bg: if($variant == 'light', darken(mix($c, $base_color, 85%), 8%), darken(mix($c, $base_color, 85%), 4%));
    $_bc: if($variant == 'light', $_bg ,_border_color($c));

    color: if($tc != $fg_color, mix($tc, $_bg, 80%), $backdrop_fg_color);
    border-color: if($c != $bg_color, $_bc, $backdrop_borders_color);
    $button_fill: image($_bg) !global;
    background-image: $button_fill;
    @include _shadows(inset 0 1px transparentize(white, 1), $_blank_edge);
  }

  @else if $t==backdrop-insensitive {
  //
  // backdrop insensitive button
  //

    $_bg: if($c != $bg_color, mix($c, $base_color, 85%), if($variant=='light', $insensitive_bg_color, lighten($insensitive_bg_color, 3%))); // Yaru change
    $_bc: if($variant == 'light', $_bg,_border_color($c));

    color: if($c != $bg_color, mix($tc, $_bg, 35%), $backdrop_insensitive_color);
    border-color: if($c != $bg_color, $_bc, $backdrop_borders_color);
    $button_fill: image($_bg) !global;
    background-image: $button_fill;
    text-shadow: none;
    -gtk-icon-shadow: none;
    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    @include _shadows(inset 0 1px transparentize(white, 1), $_blank_edge);
  }

  @else if $t==backdrop-insensitive-active {
  //
  // backdrop insensitive pushed button
  //

    $_bg: if($variant == 'light', darken(mix($c, $base_color, 85%), 8%), darken(mix($c, $base_color, 85%), 4%));
    $_bc: if($variant == 'light', $_bg, _border_color($c));

    color: if($c != $bg_color, mix($tc, $_bg, 35%), $backdrop_insensitive_color);
    border-color: if($c != $bg_color, $_bc, $backdrop_borders_color);
    $button_fill: image($_bg) !global;
    background-image: $button_fill;
    @include _shadows(inset 0 1px transparentize(white, 1), $_blank_edge);
  }

  @else if $t==osd {
  //
  // normal osd button
  //
    $_bg: if($c != $bg_color, transparentize($c, 0.5), lighten($osd_bg_color, 9%)); // Yaru change: make osd buttons visible

    color: $osd_fg_color;
    border-color: $osd_borders_color;
    background-color: transparent;
    $button_fill: image($_bg) !global;
    background-image: $button_fill;
    background-clip: padding-box;
    // box-shadow: inset 0 1px transparentize(white, 0.9); // Yaru change: remove the shadow
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
    outline-color: transparentize($osd_fg_color, 0.7);
  }

  @else if $t==osd-hover {
  //
  // active osd button
  //
    $_bg: if($c != $bg_color, transparentize($c, 0.3), lighten($osd_bg_color, 12%));

    color: white;
    border-color: $osd_borders_color;
    background-color: transparent;
    $button_fill: image($_bg) !global;
    background-image: $button_fill;
    background-clip: padding-box;
    // box-shadow: inset 0 1px transparentize(white, 0.9); // Yaru change: remove the shadow
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
    outline-color: transparentize($osd_fg_color, 0.7);
  }

  @else if $t==osd-active {
  //
  // active osd button
  //
    $_bg: if($c != $bg_color, $c, $osd_borders_color);

    color: white;
    border-color: $osd_borders_color;
    background-color: transparent;
    $button_fill: image($_bg) !global;
    background-image: $button_fill;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
    outline-color: transparentize($osd_fg_color, 0.7);
  }

  @else if $t==osd-insensitive {
  //
  // insensitive osd button
  //
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-color: transparent;
    $button_fill: image($osd_insensitive_bg_color) !global;
    background-image: $button_fill;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }

  @else if $t==osd-backdrop {
  //
  // backdrop osd button
  //
    $_bg: if($c != $bg_color, transparentize($c, 0.5), $osd_bg_color);

    color: $osd_fg_color;
    border-color: $osd_borders_color;
    background-color: transparent;
    $button_fill: image($_bg) !global;
    background-image: $button_fill;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }

  @else if $t==undecorated {
  //
  // reset
  //
    border-color: transparent;
    background-color: transparent;
    $button_fill: none !global;
    background-image: $button_fill;

    @include _shadows(inset 0 1px transparentize(white, 1), $_blank_edge);

    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

@mixin headerbar_fill($c:$headerbar_color, $hc:$top_hilight, $ov: none) {
//
// headerbar fill
//
// $c:  base color
// $hc: top highlight color
// $ov: a background layer for background shorthand (hence no commas!)
//
  $gradient: linear-gradient(to top, darken($c, 0%), lighten($c, 0%)); // Yaru change: no gradients

  @if $variant == 'dark' { $gradient: linear-gradient(to top, lighten($c, 6%), lighten($c, 6%)); } // Yaru change: no gradients

  @if $ov != none { background: $c $ov, $gradient; }
  @else { background: $c $gradient; }

  box-shadow: inset 0 1px $hc; // top highlight
}

@mixin overshoot($p, $t:normal, $c:$fg_color) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_small_gradient_length: 5%;
  $_big_gradient_length: 100%;

  $_position: center top;
  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p==bottom {
    $_position: center bottom;
    $_linear_gradient_direction: to top;
  }

  @else if $p==right {
    $_position: right center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  @else if $p==left {
    $_position: left center;
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $c;
  $_big_gradient_color: $c;

  @if $c==$fg_color {
    $_small_gradient_color: darken($borders_color, 10%);
    $_big_gradient_color: $fg_color;

    @if $t==backdrop { $_small_gradient_color: $backdrop_borders_color; }
  }

  $_small_gradient: -gtk-gradient(radial,
                                  $_position, 0,
                                  $_position, 0.5,
                                  to($_small_gradient_color),
                                  to(transparentize($_small_gradient_color, 1)));

  $_big_gradient: -gtk-gradient(radial,
                                $_position, 0,
                                $_position, 0.6,
                                from(transparentize($_big_gradient_color, 0.93)),
                                to(transparentize($_big_gradient_color, 1)));

  @if $t==normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  }

  @else if $t==backdrop {
    background-image: $_small_gradient;
    background-size: $_small_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $_position;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}

/***************************
 * Check and Radio buttons *
 ***************************/

 @mixin check($t, $c:$bg_color, $tc:$fg_color, $checked: false) {
  // Check/Radio drawing function
  //
  // $t:        check/radio type,
  // $c:        base button color for colored* types
  // $tc:       optional text color for colored* types
  // $checked:  bool to chose between checked/unchecked
  //
  // possible $t values:
  // normal, hover, active, insensitive, backdrop, backdrop-insensitive

  $_border_color: if($c==$checkradio_bg_color, $c, $alt_borders_color);
  $_dim_border_color: transparentize($_border_color, if($variant == 'light', 0.3, 0.7));

  @if $t==normal  { // Yaru change: no gradients, better borders
    background-clip: if($checked, border-box, padding-box);
    background-image: image(lighten($c, if($variant=='dark', if($c==$checkradio_bg_color, 0%, 5%), 0%)));
    border-color: $_border_color;
    box-shadow: 0 1px transparentize(black, 0.95);
    color: $tc;
  }

  @if $t==hover {
    background-image: image(if($c==$checkradio_bg_color, lighten($c, 7%), if($variant=='light', darken($c, 4%), lighten($c, 7%))));
    border-color: if($c == $checkradio_bg_color, lighten($c, 7%), $alt_borders_color);
  }

  @if $t==active {
    border-color: if($c==white, $_border_color, darken($c, 7%));
    background-image: image(if($c==white, $_border_color, darken($c, 7%)));
    box-shadow: none;
  }

  @if $t==insensitive {
    box-shadow: none;
    color: $insensitive_fg_color;
    border-color: $insensitive_borders_color;
    background-image: image($insensitive_bg_color);
  }

  @if $t==backdrop {
    background-image: image($c);
    border-color: $_border_color;
    box-shadow: none;
    color: $tc;
  }

  @if $t==backdrop-insensitive {
    box-shadow: none;
    color: $backdrop_fg_color;
    border-color: $insensitive_borders_color;
    background-image: image($insensitive_bg_color);
  }
}
